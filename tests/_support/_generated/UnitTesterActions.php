<?php  //[STAMP] f687f10daa7aaf589d9146a3309c4d7d
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait UnitTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the absolute path to the plugins directory.
     *
     * The value will first look at the `WP_PLUGIN_DIR` constant, then the `pluginsFolder` configuration parameter
     * and will, finally, look in the default path from the WordPress root directory.
     *
     * @example
     * ```php
     * $plugins = $this->getPluginsFolder();
     * $hello = $this->getPluginsFolder('hello.php');
     * ```
     *
     * @param string $path A relative path to append to te plugins directory absolute path.
     *
     * @return string The absolute path to the `pluginsFolder` path or the same with a relative path appended if `$path`
     *                is provided.
     *
     * @throws ModuleConfigException If the path to the plugins folder does not exist.
     * @see \Codeception\Module\WPLoader::getPluginsFolder()
     */
    public function getPluginsFolder($path = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getPluginsFolder', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Accessor method to get the object storing the factories for things.
     * This methods gives access to the same factories provided by the
     * [Core test suite](https://make.wordpress.org/core/handbook/testing/automated-testing/writing-phpunit-tests/).
     *
     * @example
     * ```php
     * $postId = $I->factory()->post->create();
     * $userId = $I->factory()->user->create(['role' => 'administrator']);
     * ```
     *
     * @return FactoryStore A factory store, proxy to get hold of the Core suite object factories.
     *
     * @link https://make.wordpress.org/core/handbook/testing/automated-testing/writing-phpunit-tests/
     * @see \Codeception\Module\WPLoader::factory()
     */
    public function factory() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('factory', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the absolute path to the WordPress content directory.
     *
     * @example
     * ```php
     * $content = $this->getContentFolder();
     * $themes = $this->getContentFolder('themes');
     * $twentytwenty = $this->getContentFolder('themes/twentytwenty');
     * ```
     *
     * @param string $path An optional path to append to the content directory absolute path.
     *
     * @return string The content directory absolute path, or a path in it.
     *
     * @throws ModuleConfigException If the path to the content directory cannot be resolved.
     * @see \Codeception\Module\WPLoader::getContentFolder()
     */
    public function getContentFolder($path = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getContentFolder', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Starts the debug of all WordPress filters and actions.
     *
     * The method hook on `all` filters and actions to debug their value.
     *
     * @example
     * ```php
     * // Start debugging all WordPress filters and action final and initial values.
     * $this->startWpFiltersDebug();
     *
     * // Run some code firing filters and debug them.
     *
     * // Stop debugging all WordPress filters and action final and initial values.
     * $this->stopWpFiltersDebug();
     * ```
     *
     * @param callable|null $format A callback function to format the arguments debug output; the callback will receive
     *                              the array of arguments as input.
     * @see \Codeception\Module\WPLoader::startwpfiltersdebug()
     */
    public function startwpfiltersdebug($format = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('startwpfiltersdebug', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Stops the debug of all WordPress filters and actions.
     *
     * @example
     * ```php
     * // Start debugging all WordPress filters and action final and initial values.
     * $this->startWpFiltersDebug();
     *
     * // Run some code firing filters and debug them.
     *
     * // Stop debugging all WordPress filters and action final and initial values.
     * $this->stopWpFiltersDebug();
     * ```
     * @see \Codeception\Module\WPLoader::stopWpFiltersDebug()
     */
    public function stopWpFiltersDebug() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('stopWpFiltersDebug', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Debugs a single WordPress filter initial call using Codeception debug functions.
     *
     * The output will show following the selected output verbosity (`--debug` and `-vvv` CLI options).
     *
     * @example
     * ```php
     * // Start debugging all WordPress filters initial value.
     * add_filter('all', [$this,'debugWpFilterInitial']);
     *
     * // Run some code firing filters and debug them.
     *
     * // Stop debugging all WordPress filters initial value.
     * remove_filter('all', [$this,'debugWpFilterInitial']);
     * ```
     *
     * @param mixed ...$args The filter call arguments.
     *
     * @return mixed The filter input value, unchanged.
     * @see \Codeception\Module\WPLoader::debugWpFilterInitial()
     */
    public function debugWpFilterInitial($args = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('debugWpFilterInitial', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Debugs a single WordPress filter final call using Codeception debug functions.
     *
     * The output will show following the selected output verbosity (`--debug` and `-vvv` CLI options).
     *
     * @example
     * ```php
     * // Start debugging all WordPress filters final value.
     * add_filter('all', [$this,'debugWpFilterFinal']);
     *
     * // Run some code firing filters and debug them.
     *
     * // Stop debugging all WordPress filters final value.
     * remove_filter('all', [$this,'debugWpFilterFinal']);
     * ```
     *
     * @param mixed ...$args The filter call arguments.
     *
     * @return mixed The filter input value, unchanged.
     * @see \Codeception\Module\WPLoader::debugWpFilterFinal()
     */
    public function debugWpFilterFinal($args = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('debugWpFilterFinal', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Debugs a single WordPress action initial call using Codeception debug functions.
     *
     * The output will show following the selected output verbosity (`--debug` and `-vvv` CLI options).
     *
     * @example
     * ```php
     * // Start debugging all WordPress actions initial value.
     * add_action('all', [$this,'debugWpActionInitial']);
     *
     * // Run some code firing actions and debug them.
     *
     * // Stop debugging all WordPress actions initial value.
     * remove_action('all', [$this,'debugWpActionInitial']);
     * ```
     *
     * @param mixed ...$args The action call arguments.
     * @see \Codeception\Module\WPLoader::debugWpActionInitial()
     */
    public function debugWpActionInitial($args = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('debugWpActionInitial', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Debugs a single WordPress action final call using Codeception debug functions.
     *
     * The output will show following the selected output verbosity (`--debug` and `-vvv` CLI options).
     *
     * @example
     * ```php
     * // Start debugging all WordPress actions final value.
     * add_action('all', [$this,'debugWpActionFinal']);
     *
     * // Run some code firing actions and debug them.
     *
     * // Stop debugging all WordPress actions final value.
     * remove_action('all', [$this,'debugWpActionFinal']);
     * ```
     *
     * @param mixed ...$args The action call arguments.
     * @see \Codeception\Module\WPLoader::debugWpActionFinal()
     */
    public function debugWpActionFinal($args = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('debugWpActionFinal', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that at least one query was made during the test.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * wp_cache_delete('page-posts', 'acme');
     * $pagePosts = $plugin->getPagePosts();
     * $I->assertQueries('Queries should be made to set the cache.')
     * ```
     *
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueries()
     */
    public function assertQueries($message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueries', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no queries were made.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * $posts = $this->factory()->post->create_many(3);
     * wp_cache_set('page-posts', $posts, 'acme');
     * $pagePosts = $plugin->getPagePosts();
     * $I->assertNotQueries('Queries should not be made if the cache is set.')
     * ```
     *
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertNotQueries()
     */
    public function assertNotQueries($message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotQueries', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that n queries have been made.
     *
     * @example
     * ```php
     * $posts = $this->factory()->post->create_many(3);
     * $cachedUsers = $this->factory()->user->create_many(2);
     * $nonCachedUsers = $this->factory()->user->create_many(2);
     * foreach($cachedUsers as $userId){
     *      wp_cache_set('page-posts-for-user-' . $userId, $posts, 'acme');
     * }
     * // Run the same query as different users
     * foreach(array_merge($cachedUsers, $nonCachedUsers) as $userId){
     *      $pagePosts = $plugin->getPagePostsForUser($userId);
     * }
     * $I->assertCountQueries(2, 'A query should be made for each user missing cached posts.')
     * ```
     *
     * @param int $n The expected number of queries.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertCountQueries()
     */
    public function assertCountQueries($n, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertCountQueries', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that at least a query starting with the specified statement was made.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * wp_cache_flush();
     * cached_get_posts($args);
     * $I->assertQueriesByStatement('SELECT');
     * ```
     *
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesByStatement()
     */
    public function assertQueriesByStatement($statement, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesByStatement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that at least one query has been made by the specified class method.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * $options = new Acme\Options();
     * $options->update('showAds', false);
     * $I->assertQueriesByMethod('Acme\Options', 'update');
     * ```
     *
     * @param string $class The fully qualified name of the class to check.
     * @param string $method The name of the method to check.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesByMethod()
     */
    public function assertQueriesByMethod($class, $method, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesByMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no queries have been made by the specified class method.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * $bookRepository = new Acme\BookRepository();
     * $repository->where('ID', 23)->set('title', 'Peter Pan', $deferred = true);
     * $this->assertNotQueriesByStatement('INSERT', 'Deferred write should happen on __destruct');
     * ```
     *
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertNotQueriesByStatement()
     */
    public function assertNotQueriesByStatement($statement, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotQueriesByStatement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that n queries starting with the specified statement were made.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * $bookRepository = new Acme\BookRepository();
     * $repository->where('ID', 23)->set('title', 'Peter Pan', $deferred = true);
     * $repository->where('ID', 89)->set('title', 'Moby-dick', $deferred = true);
     * $repository->where('ID', 2389)->set('title', 'The call of the wild', $deferred = false);
     * $this->assertQueriesCountByStatement(1, 'INSERT', 'Deferred write should happen on __destruct');
     * ```
     *
     * @param int $n The expected number of queries.
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesCountByStatement()
     */
    public function assertQueriesCountByStatement($n, $statement, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesCountByStatement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no queries have been made by the specified class method.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * $options = new Acme\Options();
     * $options->update('adsSource', 'not-a-real-url.org');
     * $I->assertNotQueriesByMethod('Acme\Options', 'update');
     * ```
     *
     * @param string $class The fully qualified name of the class to check.
     * @param string $method The name of the method to check.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertNotQueriesByMethod()
     */
    public function assertNotQueriesByMethod($class, $method, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotQueriesByMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that n queries have been made by the specified class method.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * $bookRepository = new Acme\BookRepository();
     * $repository->where('ID', 23)->commit('title', 'Peter Pan');
     * $repository->where('ID', 89)->commit('title', 'Moby-dick');
     * $repository->where('ID', 2389)->commit('title', 'The call of the wild');
     * $this->assertQueriesCountByMethod(3, 'Acme\BookRepository', 'commit');
     * ```
     * @param int $n The expected number of queries.
     * @param string $class The fully qualified name of the class to check.
     * @param string $method The name of the method to check.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesCountByMethod()
     */
    public function assertQueriesCountByMethod($n, $class, $method, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesCountByMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that queries were made by the specified function.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * acme_clean_queue();
     * $this->assertQueriesByFunction('acme_clean_queue');
     * ```
     *
     * @param string $function The fully qualified name of the function to check.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesByFunction()
     */
    public function assertQueriesByFunction($function, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesByFunction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no queries were made by the specified function.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * $this->assertEmpty(Acme\get_orphaned_posts());
     * Acme\delete_orphaned_posts();
     * $this->assertNotQueriesByFunction('Acme\delete_orphaned_posts');
     * ```
     *
     * @param string $function The fully qualified name of the function to check.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertNotQueriesByFunction()
     */
    public function assertNotQueriesByFunction($function, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotQueriesByFunction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that n queries were made by the specified function.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * $this->assertCount(3, Acme\get_orphaned_posts());
     * Acme\delete_orphaned_posts();
     * $this->assertQueriesCountByFunction(3, 'Acme\delete_orphaned_posts');
     * ```
     *
     * @param int $n The expected number of queries.
     * @param string $function The function to check the queries for.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesCountByFunction()
     */
    public function assertQueriesCountByFunction($n, $function, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesCountByFunction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that queries were made by the specified class method starting with the specified SQL statement.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * Acme\BookRepository::new(['title' => 'Alice in Wonderland'])->commit();
     * $this->assertQueriesByStatementAndMethod('UPDATE', Acme\BookRepository::class, 'commit');
     * ```
     *
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $class The fully qualified name of the class to check.
     * @param string $method The name of the method to check.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesByStatementAndMethod()
     */
    public function assertQueriesByStatementAndMethod($statement, $class, $method, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesByStatementAndMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no queries were made by the specified class method starting with the specified SQL statement.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * Acme\BookRepository::new(['title' => 'Alice in Wonderland'])->commit();
     * $this->assertQueriesByStatementAndMethod('INSERT', Acme\BookRepository::class, 'commit');
     * ```
     *
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $class The fully qualified name of the class to check.
     * @param string $method The name of the method to check.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertNotQueriesByStatementAndMethod()
     */
    public function assertNotQueriesByStatementAndMethod($statement, $class, $method, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotQueriesByStatementAndMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that n queries were made by the specified class method starting with the specified SQL statement.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * Acme\BookRepository::new(['title' => 'Alice in Wonderland'])->commit();
     * Acme\BookRepository::new(['title' => 'Moby-Dick'])->commit();
     * Acme\BookRepository::new(['title' => 'The Call of the Wild'])->commit();
     * $this->assertQueriesCountByStatementAndMethod(3, 'INSERT', Acme\BookRepository::class, 'commit');
     * ```
     *
     * @param int $n The expected number of queries.
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $class The fully qualified name of the class to check.
     * @param string $method The name of the method to check.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesCountByStatementAndMethod()
     */
    public function assertQueriesCountByStatementAndMethod($n, $statement, $class, $method, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesCountByStatementAndMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that queries were made by the specified function starting with the specified SQL statement.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * wp_insert_post(['post_type' => 'book', 'post_title' => 'Alice in Wonderland']);
     * $this->assertQueriesByStatementAndFunction('INSERT', 'wp_insert_post');
     * ```
     *
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $function The fully qualified function name.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesByStatementAndFunction()
     */
    public function assertQueriesByStatementAndFunction($statement, $function, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesByStatementAndFunction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no queries were made by the specified function starting with the specified SQL statement.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * wp_insert_post(['ID' => $bookId, 'post_title' => 'The Call of the Wild']);
     * $this->assertNotQueriesByStatementAndFunction('INSERT', 'wp_insert_post');
     * $this->assertQueriesByStatementAndFunction('UPDATE', 'wp_insert_post');
     * ```
     *
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $function The name of the function to check the assertions for.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertNotQueriesByStatementAndFunction()
     */
    public function assertNotQueriesByStatementAndFunction($statement, $function, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotQueriesByStatementAndFunction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that n queries were made by the specified function starting with the specified SQL statement.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * wp_insert_post(['post_type' => 'book', 'post_title' => 'The Call of the Wild']);
     * wp_insert_post(['post_type' => 'book', 'post_title' => 'Alice in Wonderland']);
     * wp_insert_post(['post_type' => 'book', 'post_title' => 'The Chocolate Factory']);
     * $this->assertQueriesCountByStatementAndFunction(3, 'INSERT', 'wp_insert_post');
     * ```
     *
     * @param int $n The expected number of queries.
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $function The fully-qualified function name.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesCountByStatementAndFunction()
     */
    public function assertQueriesCountByStatementAndFunction($n, $statement, $function, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesCountByStatementAndFunction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that at least one query was made as a consequence of the specified action.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_action( 'edit_post', function($postId){
     *         $count = get_option('acme_title_updates_count');
     *         update_option('acme_title_updates_count', ++$count);
     * } );
     * wp_update_post(['ID' => $bookId, 'post_title' => 'New Title']);
     * $this->assertQueriesByAction('edit_post');
     * ```
     *
     * @param string $action The action name, e.g. 'init'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesByAction()
     */
    public function assertQueriesByAction($action, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesByAction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no queries were made as a consequence of the specified action.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_action( 'edit_post', function($postId){
     *         $count = get_option('acme_title_updates_count');
     *         update_option('acme_title_updates_count', ++$count);
     * } );
     * wp_delete_post($bookId);
     * $this->assertNotQueriesByAction('edit_post');
     * ```
     *
     * @param string $action The action name, e.g. 'init'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertNotQueriesByAction()
     */
    public function assertNotQueriesByAction($action, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotQueriesByAction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that n queries were made as a consequence of the specified action.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_action( 'edit_post', function($postId){
     *         $count = get_option('acme_title_updates_count');
     *         update_option('acme_title_updates_count', ++$count);
     * } );
     * wp_update_post(['ID' => $bookOneId, 'post_title' => 'One']);
     * wp_update_post(['ID' => $bookTwoId, 'post_title' => 'Two']);
     * wp_update_post(['ID' => $bookThreeId, 'post_title' => 'Three']);
     * $this->assertQueriesCountByAction(3, 'edit_post');
     * ```
     *
     * @param int $n The expected number of queries.
     * @param string $action The action name, e.g. 'init'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesCountByAction()
     */
    public function assertQueriesCountByAction($n, $action, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesCountByAction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that at least one query was made as a consequence of the specified action containing the SQL query.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_action( 'edit_post', function($postId){
     *         $count = get_option('acme_title_updates_count');
     *         update_option('acme_title_updates_count', ++$count);
     * } );
     * wp_update_post(['ID' => $bookId, 'post_title' => 'New']);
     * $this->assertQueriesByStatementAndAction('UPDATE', 'edit_post');
     * ```
     *
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $action The action name, e.g. 'init'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesByStatementAndAction()
     */
    public function assertQueriesByStatementAndAction($statement, $action, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesByStatementAndAction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no queries were made as a consequence of the specified action containing the SQL query.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_action( 'edit_post', function($postId){
     *         $count = get_option('acme_title_updates_count');
     *         update_option('acme_title_updates_count', ++$count);
     * } );
     * wp_delete_post($bookId);
     * $this->assertNotQueriesByStatementAndAction('DELETE', 'delete_post');
     * ```
     *
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $action The action name, e.g. 'init'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertNotQueriesByStatementAndAction()
     */
    public function assertNotQueriesByStatementAndAction($statement, $action, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotQueriesByStatementAndAction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that n queries were made as a consequence of the specified action containing the specified SQL statement.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_action( 'edit_post', function($postId){
     *         $count = get_option('acme_title_updates_count');
     *         update_option('acme_title_updates_count', ++$count);
     * } );
     * wp_delete_post($bookOneId);
     * wp_delete_post($bookTwoId);
     * wp_update_post(['ID' => $bookThreeId, 'post_title' => 'New']);
     * $this->assertQueriesCountByStatementAndAction(2, 'DELETE', 'delete_post');
     * $this->assertQueriesCountByStatementAndAction(1, 'INSERT', 'edit_post');
     * ```
     *
     * @param int $n The expected number of queries.
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $action The action name, e.g. 'init'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesCountByStatementAndAction()
     */
    public function assertQueriesCountByStatementAndAction($n, $statement, $action, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesCountByStatementAndAction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that at least one query was made as a consequence of the specified filter.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_filter('the_title', function($title, $postId){
     *      $post = get_post($postId);
     *      if($post->post_type !== 'book'){
     *          return $title;
     *      }
     *      $new = get_option('acme_new_prefix');
     *      return "{$new} - " . $title;
     * });
     * $title = apply_filters('the_title', get_post($bookId)->post_title, $bookId);
     * $this->assertQueriesByFilter('the_title');
     * ```
     *
     * @param string $filter The filter name, e.g. 'posts_where'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesByFilter()
     */
    public function assertQueriesByFilter($filter, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesByFilter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no queries were made as a consequence of the specified filter.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_filter('the_title', function($title, $postId){
     *      $post = get_post($postId);
     *      if($post->post_type !== 'book'){
     *          return $title;
     *      }
     *      $new = get_option('acme_new_prefix');
     *      return "{$new} - " . $title;
     * });
     * $title = apply_filters('the_title', get_post($notABookId)->post_title, $notABookId);
     * $this->assertNotQueriesByFilter('the_title');
     * ```
     *
     * @param string $filter The filter name, e.g. 'posts_where'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertNotQueriesByFilter()
     */
    public function assertNotQueriesByFilter($filter, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotQueriesByFilter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that n queries were made as a consequence of the specified filter.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_filter('the_title', function($title, $postId){
     *      $post = get_post($postId);
     *      if($post->post_type !== 'book'){
     *          return $title;
     *      }
     *      $new = get_option('acme_new_prefix');
     *      return "{$new} - " . $title;
     * });
     * $title = apply_filters('the_title', get_post($bookOneId)->post_title, $bookOneId);
     * $title = apply_filters('the_title', get_post($notABookId)->post_title, $notABookId);
     * $title = apply_filters('the_title', get_post($bookTwoId)->post_title, $bookTwoId);
     * $this->assertQueriesCountByFilter(2, 'the_title');
     * ```
     *
     * @param int $n The expected number of queries.
     * @param string $filter The filter name, e.g. 'posts_where'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesCountByFilter()
     */
    public function assertQueriesCountByFilter($n, $filter, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesCountByFilter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that at least one query was made as a consequence of the specified filter containing the SQL query.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_filter('the_title', function($title, $postId){
     *      $post = get_post($postId);
     *      if($post->post_type !== 'book'){
     *          return $title;
     *      }
     *      $new = get_option('acme_new_prefix');
     *      return "{$new} - " . $title;
     * });
     * $title = apply_filters('the_title', get_post($bookId)->post_title, $bookId);
     * $this->assertQueriesByStatementAndFilter('SELECT', 'the_title');
     * ```
     *
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                          Regular expressions must contain delimiters.
     * @param string $filter The filter name, e.g. 'posts_where'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesByStatementAndFilter()
     */
    public function assertQueriesByStatementAndFilter($statement, $filter, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesByStatementAndFilter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no queries were made as a consequence of the specified filter containing the specified SQL query.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_filter('the_title', function($title, $postId){
     *      $post = get_post($postId);
     *      if($post->post_type !== 'book'){
     *          return $title;
     *      }
     *      $new = get_option('acme_new_prefix');
     *      return "{$new} - " . $title;
     * });
     * $title = apply_filters('the_title', get_post($notABookId)->post_title, $notABookId);
     * $this->assertNotQueriesByStatementAndFilter('SELECT', 'the_title');
     * ```
     *
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $filter The filter name, e.g. 'posts_where'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertNotQueriesByStatementAndFilter()
     */
    public function assertNotQueriesByStatementAndFilter($statement, $filter, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotQueriesByStatementAndFilter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that n queries were made as a consequence of the specified filter containing the specified SQL statement.
     *
     * Queries generated by `setUp`, `tearDown` and `factory` methods are excluded by default.
     *
     * @example
     * ```php
     * add_filter('the_title', function($title, $postId){
     *      $post = get_post($postId);
     *      if($post->post_type !== 'book'){
     *          return $title;
     *      }
     *      $new = get_option('acme_new_prefix');
     *      return "{$new} - " . $title;
     * });
     * // Warm up the cache.
     * $title = apply_filters('the_title', get_post($bookOneId)->post_title, $bookOneId);
     * // Cache is warmed up now.
     * $title = apply_filters('the_title', get_post($bookTwoId)->post_title, $bookTwoId);
     * $title = apply_filters('the_title', get_post($bookThreeId)->post_title, $bookThreeId);
     * $this->assertQueriesCountByStatementAndFilter(1, 'SELECT', 'the_title');
     * ```
     *
     * @param int $n The expected number of queries.
     * @param string $statement A simple string the statement should start with or a valid regular expression.
     *                           Regular expressions must contain delimiters.
     * @param string $filter The filter name, e.g. 'posts_where'.
     * @param string $message An optional message to override the default one.
     * @see \Codeception\Module\WPQueries::assertQueriesCountByStatementAndFilter()
     */
    public function assertQueriesCountByStatementAndFilter($n, $statement, $filter, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueriesCountByStatementAndFilter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the current number of queries.
     * Set-up and tear-down queries performed by the test case are filtered out.
     *
     * @example
     * ```php
     * // In a WPTestCase, using the global $wpdb object.
     * $queriesCount = $this->queries()->countQueries();
     * // In a WPTestCase, using a custom $wpdb object.
     * $queriesCount = $this->queries()->countQueries($customWdbb);
     * ```
     *
     * @param null|\wpdb $wpdb A specific instance of the `wpdb` class or `null` to use the global one.
     *
     * @return int The current count of performed queries.
     * @see \Codeception\Module\WPQueries::countQueries()
     */
    public function countQueries($wpdb = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('countQueries', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the queries currently performed by the global database object or the specified one.
     * Set-up and tear-down queries performed by the test case are filtered out.
     *
     * @example
     * ```php
     * // In a WPTestCase, using the global $wpdb object.
     * $queries = $this->queries()->getQueries();
     * // In a WPTestCase, using a custom $wpdb object.
     * $queries = $this->queries()->getQueries($customWdbb);
     * ```
     *
     * @param null|\wpdb $wpdb A specific instance of the `wpdb` class or `null` to use the global one.
     *
     * @return array An array of queries.
     * @see \Codeception\Module\WPQueries::getQueries()
     */
    public function getQueries($wpdb = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getQueries', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Handles and checks exception called inside callback function.
     * Either exception class name or exception instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectException(MyException::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectException(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or exception code, you can pass them with exception instance:
     * ```php
     * <?php
     * // will check that exception MyException is thrown with "Don't do bad things" message
     * $I->expectException(new MyException("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @deprecated Use expectThrowable() instead
     * @param $exception string or \Exception
     * @param $callback
     * @see \Codeception\Module\Asserts::expectException()
     */
    public function expectException($exception, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('expectException', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Handles and checks throwables (Exceptions/Errors) called inside the callback function.
     * Either throwable class name or throwable instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectThrowable(MyThrowable::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectThrowable(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or throwable code, you can pass them with throwable instance:
     * ```php
     * <?php
     * // will check that throwable MyError is thrown with "Don't do bad things" message
     * $I->expectThrowable(new MyError("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @param $throwable string or \Throwable
     * @param $callback
     * @see \Codeception\Module\Asserts::expectThrowable()
     */
    public function expectThrowable($throwable, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('expectThrowable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are equal.
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @param float  $delta
     * @see \Codeception\Module\Asserts::assertEquals()
     */
    public function assertEquals($expected, $actual, $message = null, $delta = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are not equal
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @param float  $delta
     * @see \Codeception\Module\Asserts::assertNotEquals()
     */
    public function assertNotEquals($expected, $actual, $message = null, $delta = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are same
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertSame()
     */
    public function assertSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are not same
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotSame()
     */
    public function assertNotSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is greater than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertGreaterThan()
     */
    public function assertGreaterThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is greater or equal than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertGreaterThanOrEqual()
     */
    public function assertGreaterThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterThanOrEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is less than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertLessThan()
     */
    public function assertLessThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is less or equal than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertLessThanOrEqual()
     */
    public function assertLessThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessThanOrEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack contains needle
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see \Codeception\Module\Asserts::assertContains()
     */
    public function assertContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack doesn't contain needle.
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotContains()
     */
    public function assertNotContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that string match with pattern
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertRegExp()
     */
    public function assertRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertRegExp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that string match with pattern
     *
     * Alias of assertRegExp
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertMatchesRegularExpression()
     */
    public function assertMatchesRegularExpression($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertMatchesRegularExpression', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that string not match with pattern
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotRegExp()
     */
    public function assertNotRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotRegExp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that string not match with pattern
     *
     * Alias of assertNotRegExp
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertDoesNotMatchRegularExpression()
     */
    public function assertDoesNotMatchRegularExpression($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDoesNotMatchRegularExpression', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a string starts with the given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertStringStartsWith()
     */
    public function assertStringStartsWith($prefix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringStartsWith', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a string doesn't start with the given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertStringStartsNotWith()
     */
    public function assertStringStartsNotWith($prefix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringStartsNotWith', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is empty.
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertEmpty()
     */
    public function assertEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not empty.
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotEmpty()
     */
    public function assertNotEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is NULL
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNull()
     */
    public function assertNull($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNull', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not NULL
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotNull()
     */
    public function assertNotNull($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotNull', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is positive.
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertTrue()
     */
    public function assertTrue($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertTrue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the condition is NOT true (everything but true)
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotTrue()
     */
    public function assertNotTrue($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotTrue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is negative.
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFalse()
     */
    public function assertFalse($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFalse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the condition is NOT false (everything but false)
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotFalse()
     */
    public function assertNotFalse($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotFalse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file exists
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFileExists()
     */
    public function assertFileExists($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file doesn't exist
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFileNotExists()
     */
    public function assertFileNotExists($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file doesn't exist
     *
     * Alias of assertFileNotExists
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFileDoesNotExist()
     */
    public function assertFileDoesNotExist($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileDoesNotExist', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $expected
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertGreaterOrEquals()
     */
    public function assertGreaterOrEquals($expected, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterOrEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $expected
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertLessOrEquals()
     */
    public function assertLessOrEquals($expected, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessOrEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertIsEmpty()
     */
    public function assertIsEmpty($actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $key
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertArrayHasKey()
     */
    public function assertArrayHasKey($key, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArrayHasKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $key
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertArrayNotHasKey()
     */
    public function assertArrayNotHasKey($key, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArrayNotHasKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $expectedCount
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertCount()
     */
    public function assertCount($expectedCount, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $class
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertInstanceOf()
     */
    public function assertInstanceOf($class, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInstanceOf', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $class
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertNotInstanceOf()
     */
    public function assertNotInstanceOf($class, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotInstanceOf', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $type
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertInternalType()
     */
    public function assertInternalType($type, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInternalType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fails the test with message.
     *
     * @param $message
     * @see \Codeception\Module\Asserts::fail()
     */
    public function fail($message) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertStringContainsString()
     */
    public function assertStringContainsString($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringContainsString', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertStringNotContainsString()
     */
    public function assertStringNotContainsString($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotContainsString', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertStringContainsStringIgnoringCase()
     */
    public function assertStringContainsStringIgnoringCase($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringContainsStringIgnoringCase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertStringNotContainsStringIgnoringCase()
     */
    public function assertStringNotContainsStringIgnoringCase($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotContainsStringIgnoringCase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @since 1.1.0 of module-asserts
     * @see \Codeception\Module\Asserts::assertStringEndsWith()
     */
    public function assertStringEndsWith($suffix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEndsWith', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @since 1.1.0 of module-asserts
     * @see \Codeception\Module\Asserts::assertStringEndsNotWith()
     */
    public function assertStringEndsNotWith($suffix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEndsNotWith', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsArray()
     */
    public function assertIsArray($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsArray', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsBool()
     */
    public function assertIsBool($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsBool', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsFloat()
     */
    public function assertIsFloat($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsFloat', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsInt()
     */
    public function assertIsInt($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsInt', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNumeric()
     */
    public function assertIsNumeric($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNumeric', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsObject()
     */
    public function assertIsObject($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsObject', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsResource()
     */
    public function assertIsResource($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsResource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsString()
     */
    public function assertIsString($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsString', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsScalar()
     */
    public function assertIsScalar($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsScalar', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsCallable()
     */
    public function assertIsCallable($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsCallable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNotArray()
     */
    public function assertIsNotArray($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotArray', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNotBool()
     */
    public function assertIsNotBool($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotBool', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNotFloat()
     */
    public function assertIsNotFloat($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotFloat', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNotInt()
     */
    public function assertIsNotInt($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotInt', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNotNumeric()
     */
    public function assertIsNotNumeric($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotNumeric', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNotObject()
     */
    public function assertIsNotObject($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotObject', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNotResource()
     */
    public function assertIsNotResource($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotResource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNotString()
     */
    public function assertIsNotString($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotString', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNotScalar()
     */
    public function assertIsNotScalar($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotScalar', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertIsNotCallable()
     */
    public function assertIsNotCallable($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotCallable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertEqualsCanonicalizing()
     */
    public function assertEqualsCanonicalizing($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEqualsCanonicalizing', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertNotEqualsCanonicalizing()
     */
    public function assertNotEqualsCanonicalizing($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEqualsCanonicalizing', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertEqualsIgnoringCase()
     */
    public function assertEqualsIgnoringCase($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEqualsIgnoringCase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertNotEqualsIgnoringCase()
     */
    public function assertNotEqualsIgnoringCase($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEqualsIgnoringCase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertEqualsWithDelta()
     */
    public function assertEqualsWithDelta($expected, $actual, $delta, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEqualsWithDelta', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Asserts::assertNotEqualsWithDelta()
     */
    public function assertNotEqualsWithDelta($expected, $actual, $delta, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEqualsWithDelta', func_get_args()));
    }
}
